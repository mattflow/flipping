services:
  traefik:
    image: traefik:v3.5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    command:
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL_ADDRESS}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /letsencrypt:/letsencrypt
  api:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: unless-stopped
    networks:
      - proxy
      - celery
    command: fastapi run app/main.py --port 80 --proxy-headers
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=80"
      # - "traefik.http.services.api.loadbalancer.sticky.cookie=true"
      # - "traefik.http.services.api.loadbalancer.sticky.cookie.name=sticky_cookie"
      # - "traefik.http.services.api.loadbalancer.sticky.cookie.secure=true"
      # - "traefik.http.services.api.loadbalancer.sticky.cookie.httpOnly=true"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
  celery:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    restart: unless-stopped
    networks:
      - celery
    command: celery -A app.tasks worker
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    networks:
      - celery
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
  redis:
    build: docker/redis
    restart: unless-stopped
    networks:
      - celery
    environment:
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

networks:
  proxy:
    name: proxy
  celery:
    name: celery
